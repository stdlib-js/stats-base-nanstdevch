{"version":3,"file":"index.mjs","sources":["../lib/nanstdevch.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nanvariancech = require( '@stdlib/stats-base-nanvariancech' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} standard deviation\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanstdevch( x.length, 1, x, 1 );\n* // returns ~2.0817\n*/\nfunction nanstdevch( N, correction, x, stride ) {\n\treturn sqrt( nanvariancech( N, correction, x, stride ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nanvariancech = require( '@stdlib/stats-base-nanvariancech' ).ndarray;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} standard deviation\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanstdevch( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\nfunction nanstdevch( N, correction, x, stride, offset ) {\n\treturn sqrt( nanvariancech( N, correction, x, stride, offset ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanstdevch = require( './nanstdevch.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanstdevch, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the standard deviation of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @module @stdlib/stats-base-nanstdevch\n*\n* @example\n* var nanstdevch = require( '@stdlib/stats-base-nanstdevch' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanstdevch( x.length, 1, x, 1 );\n* // returns ~2.0817\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanstdevch = require( '@stdlib/stats-base-nanstdevch' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanstdevch.ndarray( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\n\n// MODULES //\n\nvar nanstdevch = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n"],"names":["nanvariancech","require$$0","sqrt","require$$1","nanstdevch_1","N","correction","x","stride","ndarray","nanstdevch","offset","lib"],"mappings":";;uSAsBA,IAAIA,EAAgBC,EAChBC,EAAOC,EA2BX,IAAAC,EAPA,SAAqBC,EAAGC,EAAYC,EAAGC,GACtC,OAAON,EAAMF,EAAeK,EAAGC,EAAYC,EAAGC,KCtB3CR,EAAgBC,EAA8CQ,QAC9DP,EAAOC,EA+BX,IC/BAO,EAAAP,EADAF,EAOAS,EAAA,WDkBA,SAAqBL,EAAGC,EAAYC,EAAGC,EAAQG,GAC9C,OAAOT,EAAMF,EAAeK,EAAGC,EAAYC,EAAGC,EAAQG,OCdvD,ICiBAC,EDjBAF"}