{
  "version": 3,
  "sources": ["../lib/nanstdevch.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nanvariancech = require( '@stdlib/stats-base-nanvariancech' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} standard deviation\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanstdevch( x.length, 1, x, 1 );\n* // returns ~2.0817\n*/\nfunction nanstdevch( N, correction, x, stride ) {\n\treturn sqrt( nanvariancech( N, correction, x, stride ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar nanvariancech = require( '@stdlib/stats-base-nanvariancech' ).ndarray;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} standard deviation\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanstdevch( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\nfunction nanstdevch( N, correction, x, stride, offset ) {\n\treturn sqrt( nanvariancech( N, correction, x, stride, offset ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanstdevch = require( './nanstdevch.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanstdevch, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanstdevch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the standard deviation of a strided array ignoring `NaN` values and using a one-pass trial mean algorithm.\n*\n* @module @stdlib/stats-base-nanstdevch\n*\n* @example\n* var nanstdevch = require( '@stdlib/stats-base-nanstdevch' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanstdevch( x.length, 1, x, 1 );\n* // returns ~2.0817\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanstdevch = require( '@stdlib/stats-base-nanstdevch' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanstdevch.ndarray( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,kCAAmC,EAC5DC,EAAO,QAAS,gCAAiC,EAoBrD,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAS,CAC/C,OAAOL,EAAMD,EAAeG,EAAGC,EAAYC,EAAGC,CAAO,CAAE,CACxD,CAKAP,EAAO,QAAUG,IClDjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,kCAAmC,EAAE,QAC9DC,EAAO,QAAS,gCAAiC,EAwBrD,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CACvD,OAAON,EAAMD,EAAeG,EAAGC,EAAYC,EAAGC,EAAQC,CAAO,CAAE,CAChE,CAKAR,EAAO,QAAUG,ICtDjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,IACbC,EAAU,IAKdF,EAAaC,EAAY,UAAWC,CAAQ,EAK5CH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_nanstdevch", "__commonJSMin", "exports", "module", "nanvariancech", "sqrt", "nanstdevch", "N", "correction", "x", "stride", "require_ndarray", "__commonJSMin", "exports", "module", "nanvariancech", "sqrt", "nanstdevch", "N", "correction", "x", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "nanstdevch", "ndarray", "main"]
}
